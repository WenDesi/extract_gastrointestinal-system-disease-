#!/usr/bin/python
# -*- coding: utf-8 -*-

import re
import csv
import codecs

def read_csv(filepath):
    results = []
    reader = csv.reader(file(filepath, 'rU'))
    for line in reader:
        results.append(line)
    return results

def read_ontology(filepath):
    result = []
    file_obj = codecs.open(filepath,'r','utf-8')
    while True:
        line = file_obj.readline()
        # line=line.strip('\r\n')
        if 'Generated by the OWL API' in line:
            result.append(line)
            break
        result.append(line)
    file_obj.close()
    return result

def write_ontology(filepath,lines):
    file_object = open(filepath,'w')
    for line in lines:
        file_object.write(line)
    file_object.close()

def write_csv(filepath,llist):
    writer = csv.writer(file(filepath, 'wb'))
    for line in llist:
        writer.writerow(line)

def do(ontology,dict):
    new_ontology = []
    flag = False

    add_line = '        <oboInOwl:therapy>%s</oboInOwl:therapy>\n'

    new_add_line = None
    disease_pattern = re.compile(r'(?<=<owl:Class rdf:about="&obo;DOID_).+?(?=">)')
    end_pattern = re.compile(r'</owl:Class>')


    for line in ontology:

        line_disease = disease_pattern.findall(line)
        line_end = end_pattern.findall(line)


        if len(line_disease) > 0:
            doid = line_disease[0]
            if doid in dict:
                flag =  True
                new_add_line = dict[doid]
            else:
                flag = False

        elif line_end and flag:
            new_add_line = new_add_line.replace('\'','&apos;')
            new_add_line = new_add_line.replace('<','&lt;')
            new_add_line = new_add_line.replace('>','&gt;')
            new_add_line = new_add_line.replace('&','&amp;')
            new_ontology.append(add_line % new_add_line)

        new_ontology.append(line)

    return new_ontology

def build_dict(lines):
    dict = {}
    # lines = lines[54:55]

    for line in lines:
        doid = line[0]
        print line[1]
        sm = line[3]
        dict[doid] = sm
        print sm

    return dict


if __name__ == '__main__':
    full_ontology_filepath = u'step1.owl'
    new_ontology_filepath = u'step1_ok.owl'

    doid_filepath = 'therapy_with_doid.csv'



    ontology = read_ontology(full_ontology_filepath)
    print 'end read'
    dict = build_dict(read_csv(doid_filepath))

    print 'end read'

    new_ontology = do(ontology,dict)
    write_ontology(new_ontology_filepath,new_ontology)